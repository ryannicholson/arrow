/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_package = "org.apache.arrow.flight.sql.impl";
package arrow.flight.protocol.sql;

/*
 * Wrap the result of a "GetSQLInfo" action.
 */
message ActionGetSQLInfoResult {
  /*
   * Values are based on Apache Hive's Thrift Service and
   * ODBC's CLIGetInfo() function. Possible types include:
   *  - CLI_IDENTIFIER_QUOTE_CHAR
   *  - CLI_ORDER_BY_COLUMNS_IN_SELECT
   *  - TODO add more info types.
   */
  map<string, TGetSQLInfoValue> flight_sql_info = 1;

  // Implementation specific custom SQLInfo values.
  map<string, TGetSQLInfoValue> custom_info = 2;
}

/*
 * Wrapper for values returned in ActionGetSQLInfoResult.
 */
message TGetSQLInfoValue {
  oneof value {
    string string_value = 1;
    int32 integer_value = 2;
    int32 integer_bitmask = 3;
    int32 integer_flag = 4;
    bytes binary_value = 5;
    int64 long_value = 6;
  }
}

/*
 * Request message for the "GetCatalogs" action on a 
 * Flight SQL enabled backend. 
 * Requests a list of catalogs available in the server.
 */
message ActionGetCatalogsRequest {
  /*
   * Specifies the order of result values.
   */ 
  ResultsOrder order = 1;
}

/*
 * Wrap the result of a "GetCatalogs" action.
 */
message ActionGetCatalogsResult {
  repeated string catalog = 1;
}

/*
 * Request message for the "GetSchemas" action on a 
 * Flight SQL enabled backend. 
 * Requests a list of schemas available in the server.
 */
message ActionGetSchemasRequest {
  /*
   * Specifies the order of result values with prescendence:
   *  - catalog
   *  - schema
   */
  ResultsOrder order = 1;

  /*
   * Specifies the Catalog to search for schemas.
   */ 
  string catalog = 2;

  // Specifies a filter pattern for schemas to search for.
  string schema_filter_pattern = 3;
}

/*
 * Wrap the result of a "GetSchemas" action.
 */
message ActionGetSchemasResult {
  string catalog = 1;
  string schema = 2;
}

/*
 * Request message for the "GetTables" action on a 
 * Flight SQL enabled backend. 
 * Requests a list of tables available in the server.
 */
message ActionGetTablesRequest {
  /*
   * Specifies the order of result values with prescendence:
   *  - catalog
   *  - schema
   *  - table_type
   *  - table
   */
  ResultsOrder order = 1;

  // Specifies the Catalog to search for schemas.
  string catalog = 2;

  // Specifies a filter pattern for schemas to search for.
  string schema_filter_pattern = 3;

  // Specifies a filter pattern for tables to search for.
  string table_name_filter_pattern = 4;

  // Specifies a filter of table types which must match.
  repeated string table_types = 5;

  // Specifies if the schema should be returned for found tables.
  bool include_schema = 6; 
}

/*
 * Wrap the result of a "GetTables" action.
 */
message ActionGetTablesResult {
  string catalog = 1;
  string schema = 2;
  string table = 3;
  string table_type = 4;

  /*
   * Schema of the dataset as described in Schema.fbs::Schema,
   * Null if includeSchema on request is false.
   */
  bytes arrow_metadata = 5; 
}

/*
 * Wrap the result of a "GetTableTypes" action.
 */
message ActionGetTableTypesResult {
  string table_type = 1;
}

// SQL Execution Action Messages

/*
 * Request message for the "GetPreparedStatement" action on a 
 * Flight SQL enabled backend. 
 * Requests a list of tables available in the server.
 */
message ActionGetPreparedStatementRequest {
  // The SQL syntax.
  string query = 1;
}

/*
 * Wrap the result of a "GetPreparedStatement" action.
 */
message ActionGetPreparedStatementResult {

  // Opaque handle for the prepared statement on the server.
  bytes prepared_statement_handle = 1;

  // If a result set generating query was provided, dataset_schema contains the 
  // schema of the dataset as described in Schema.fbs::Schema.
  bytes dataset_schema = 2;

  // If the query provided contained parameters, parameter_schema contains the 
  // Schema of the expected parameters as described in Schema.fbs::Schema.
  bytes parameter_schema = 3;
}

/*
 * Request message for the "ClosePreparedStatement" action on a 
 * Flight SQL enabled backend. 
 * Closes server resources associated with the prepared statement handle.
 */
message ActionClosePreparedStatementRequest {
  // Opaque handle for the prepared statement on the server.
  string prepared_statement_handle = 1;
}


// SQL Execution Messages.

/*
 * Represents a SQL query. Used in the command member of FlightDescriptor
 * for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the query.
 */
message CommandStatementQuery {
  // The SQL syntax.
  string query = 1;
}

/*
 * Represents an instance of executing a prepared statement. Used in the 
 * command member of FlightDescriptor for the following RPC calls:
 *  - DoPut: bind parameter values.
 *  - GetFlightInfo: execute the prepared statement instance.
 */
message CommandPreparedStatementQuery {
  // Unique identifier for the instance of the prepared statement to execute.
  bytes client_execution_handle = 1; 
  // Opaque handle for the prepared statement on the server.
  bytes prepared_statement_handle = 2;
}

/*
 * Represents a SQL update query. Used in the command member of FlightDescriptor
 * for the the RPC call DoPut to cause the server to execute the included 
 * SQL update.
 */
message CommandStatementUpdate {
  // The SQL syntax.
  string query = 1;
}

/*
 * Represents a SQL update query. Used in the command member of FlightDescriptor
 * for the the RPC call DoPut to cause the server to execute the included 
 * prepared statement handle as an update.
 */
message CommandPreparedStatementUpdate {
  // Unique identifier for the instance of the prepared statement to execute.
  bytes client_execution_handle = 1; 
  // Opaque handle for the prepared statement on the server.
  bytes prepared_statement_handle = 2;
}

/*
 * Returned from the RPC call DoPut when a CommandStatementUpdate
 * CommandPreparedStatementUpdate was in the request, containing
 * results from the update. 
 */
message DoPutUpdateResult {
  // The number of records updated. A return value of -1 represents 
  // an unknown updated record count.
  int64 record_count = 1; 
}

message ResultsOrder {
  enum orders {
    // Protobuf pattern, not used.
    UNKNOWN = 0;

    // No ordering enforcement.
    UNORDERED = 1;

    // Order results by ascending value order.
    ASCENDING = 2;

    // Order results by descending value order.
    DESCENDING = 3;
  }
}
